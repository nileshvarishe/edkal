{"version":3,"sources":["component/Header/index.js","App.js","serviceWorker.js","component/ProductList/Reducer.js","ActionTypes.js","history.js","component/ProductList/Action.js","component/ProductList/index.js","index.js"],"names":["Header","AppBar","position","Toolbar","variant","Avatar","className","App","Boolean","window","location","hostname","match","initialState","isInProgress","isSuccess","message","productList","productReducer","state","action","type","payload","createBrowserHistory","getAllProducts","dispatch","data","Transition","React","forwardRef","props","ref","Slide","direction","ProductList","componentDidMount","componentWillReceiveProps","newProps","setState","getFormattedData","isModalOpen","oneProduct","cart","id","this","filter","product","itemId","console","log","items","filteredItems","isArray","Object","entries","map","value","undefined","Container","Typography","gutterBottom","Paper","style","marginBottom","cursor","onClick","getProductById","Grid","item","container","xs","lg","alt","src","imageUrl","name","category","price","Dialog","open","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","color","addToCart","IconButton","edge","aria-label","Component","connect","productListReducer","ownProps","bindActionCreators","reducer","combineReducers","assign","reducers","enhancer","compose","applyMiddleware","thunkMiddleware","store","createStore","ReactDOM","render","history","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"u87RAiBeA,MAZf,WACE,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,CAASC,QAAQ,SACf,kBAACC,EAAA,EAAD,CAAQC,UAAU,QAAlB,YCCKC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BChBAC,EAAe,CACjBC,cAAc,EACdC,UAAW,KACXC,QAAS,KACTC,YAAa,MAyBFC,EAvBQ,WAAmC,IAAlCC,EAAiC,uDAAzBN,EAAcO,EAAW,uCACrD,OAAQA,EAAOC,MACX,ICT+B,0BDU3B,OAAO,2BACAF,GADP,IAEIL,cAAc,IAEtB,ICb+B,0BDc3B,OAAO,2BACAK,GADP,IAEIL,cAAc,EACdG,YAAaG,EAAOE,UAE5B,IClB+B,0BDmB3B,OAAO,2BACAH,GADP,IAEIL,cAAc,EACdE,QAASI,EAAOE,UAExB,QACI,OAAOH,I,+BE1BJI,gB,wCCAFC,EAAiB,WAC1B,OAAO,SAACC,GACJA,EAOG,CACHJ,KFX+B,4BEI/BI,EAYG,CACHJ,KFhB+B,0BEiB/BC,QAd8BI,M,+HCgBhCC,EAAaC,IAAMC,YAAW,SAAoBC,EAAOC,GAC7D,OAAO,kBAACC,EAAA,EAAD,eAAOC,UAAU,KAAKF,IAAKA,GAASD,OAGvCI,E,kDACJ,WAAYJ,GAAQ,IAAD,8BACjB,cAAMA,IASRK,kBAAoB,WAClB,EAAKL,MAAMN,kBAXM,EAcnBY,0BAA4B,SAACC,IAC3B,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAUpB,cACZ,EAAKqB,SAAS,CACZrB,YAAa,EAAKsB,iBAAiBF,EAASpB,gBAfhD,EAAKE,MAAQ,CACXqB,aAAa,EACbvB,YAAa,GACbwB,WAAY,KACZC,KAAM,GANS,E,2DAsBJC,GACbC,KAAKN,SAAS,CAAEE,aAAa,IAC7B,IAAMC,EAAaG,KAAKzB,MAAMF,YAAY4B,QAAO,SAACC,GAChD,OAAOA,EAAQC,SAAWJ,KAE5BC,KAAKN,SAAS,CAAEG,WAAYA,EAAW,KAAM,WAC3CO,QAAQC,IAAI,aAAcR,Q,uCAGbS,GACf,IAAIC,EAAgB,GAUpB,OATKD,EAAME,UACTD,EAAgBE,OAAOC,QAAQJ,GAC5BK,KAAI,SAAUC,GACb,OAAQN,EAAMM,EAAM,IAAMA,EAAM,MAEjCX,QAAO,SAACW,GACP,YAAwBC,IAAjBD,EAAMT,WAGZI,I,kCAGI,IACHT,EAASE,KAAKzB,MAAduB,KACRE,KAAKN,SAAS,CACZI,KAAMA,EAAO,M,+BAIP,IAAD,SAC0CE,KAAKzB,MAA9CF,EADD,EACCA,YAAauB,EADd,EACcA,YAAaC,EAD3B,EAC2BA,WAClC,OACE,yBAAKnC,UAAU,WACb,kBAACoD,EAAA,EAAD,CAAWpD,UAAU,iBACnB,kBAACqD,EAAA,EAAD,CAAYC,cAAY,EAACxD,QAAQ,MAAjC,WAGCa,EAAYsC,KAAI,SAACT,GAChB,OACE,kBAACe,EAAA,EAAD,CACEC,MAAO,CAAEC,aAAc,GAAIC,OAAQ,WACnCC,QAAS,kBAAM,EAAKC,eAAepB,EAAQC,UAE3C,kBAACoB,EAAA,EAAD,CAAMC,MAAI,EAACC,WAAS,EAACC,GAAI,IACvB,kBAACH,EAAA,EAAD,CAAMC,MAAI,EAACG,GAAI,EAAGD,GAAI,GACpB,yBACEE,IAAK1B,EAAQC,OACb0B,IAAK3B,EAAQ4B,SACbpE,UAAU,WAGd,kBAAC6D,EAAA,EAAD,CAAMC,MAAI,EAACG,GAAI,EAAGD,GAAI,GACpB,yBAAKhE,UAAU,QACb,kBAACqD,EAAA,EAAD,CAAYC,cAAY,EAACxD,QAAQ,MAC9B0C,EAAQ6B,MAEX,kBAAChB,EAAA,EAAD,CAAYC,cAAY,GAAEd,EAAQ8B,UAClC,kBAACjB,EAAA,EAAD,CAAYC,cAAY,EAACxD,QAAQ,MAAjC,IACI0C,EAAQ+B,cASvBrC,EACC,kBAACsC,EAAA,EAAD,CACEC,KAAMvC,EACNwC,oBAAqBrD,EACrBsD,aAAW,EACXC,QAAS,WACP,EAAK5C,SAAS,CAAEE,aAAa,KAE/B2C,kBAAgB,2BAChBC,mBAAiB,kCAEjB,kBAACC,EAAA,EAAD,CAAa1C,GAAG,4BACb,sBAEH,kBAAC2C,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAmB5C,GAAG,kCACpB,kBAACkB,EAAA,EAAD,CACEC,MAAO,CAAEC,aAAc,IACvBE,QAAS,WACP,EAAK3B,SAAS,CAAEE,aAAa,MAG/B,kBAAC2B,EAAA,EAAD,CAAMC,MAAI,EAACC,WAAS,EAACC,GAAI,IACvB,kBAACH,EAAA,EAAD,CAAMC,MAAI,EAACG,GAAI,GAAID,GAAI,IACrB,yBACEE,IAAK/B,EAAWM,OAChB0B,IAAKhC,EAAWiC,SAChBpE,UAAU,iBAGd,kBAAC6D,EAAA,EAAD,CAAMC,MAAI,GACR,yBAAK9D,UAAU,QACb,kBAACqD,EAAA,EAAD,CAAYC,cAAY,EAACxD,QAAQ,MAC9BqC,EAAWkC,MAEd,kBAAChB,EAAA,EAAD,CAAYC,cAAY,GACrBnB,EAAWmC,UAEd,kBAACjB,EAAA,EAAD,CAAYC,cAAY,EAACxD,QAAQ,MAAjC,IACIqC,EAAWoC,aAQ3B,kBAACW,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACErF,QAAQ,YACR6D,QAAS,kBAAM,EAAK3B,SAAS,CAAEE,aAAa,KAC5CkD,MAAM,WAHR,UAOA,kBAACD,EAAA,EAAD,CACErF,QAAQ,YACR6D,QAAS,WACP,EAAK0B,aAEPD,MAAM,aALR,iBAYJ,GAEF,kBAACvB,EAAA,EAAD,CAAMC,MAAI,EAACG,GAAI,GAAID,GAAI,IACrB,yBAAKhE,UAAU,mBACb,kBAACmF,EAAA,EAAD,CACErF,QAAQ,YACRE,UAAU,cACVoF,MAAM,WAEN,kBAACE,EAAA,EAAD,CACEC,KAAK,QACLH,MAAM,UACNI,aAAW,QACXxF,UAAU,QAEV,kBAAC,IAAD,OACY,IAZhB,aAaasC,KAAKzB,MAAMuB,KAbxB,mB,GAlKYqD,aAyMXC,eAhBS,SAAC7E,GAEvB,OADA6B,QAAQC,IAAI,qBAAsB9B,EAAM8E,oBACjC,CACLhF,YAAaE,EAAM8E,mBAAmBhF,gBAIf,SAACQ,EAAUyE,GACpC,OAAOC,YACL,CACE3E,kBAEFC,KAIWuE,CAA6C9D,GCrNtDkE,EAAUC,YAAgBhD,OAAOiD,OAAO,GAAIC,IAE5CC,EAAWC,YAAQC,YAAgBC,MAEnCC,EAAQC,YAAYT,EAASI,GAEnCM,IAASC,OACP,kBAAC,IAAD,CAAUH,MAAOA,GACf,kBAAC,IAAD,CAAQI,QAASA,GACf,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjF,OAIvCkF,SAASC,eAAe,SNuGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7E,QAAQ6E,MAAMA,EAAM7G,c","file":"static/js/main.224b1424.chunk.js","sourcesContent":["import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Avatar from \"@material-ui/core/Avatar\";\n\nfunction Header() {\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Toolbar variant=\"dense\">\n          <Avatar className=\"logo\">Logo</Avatar>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport Header from \"./component/Header\";\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as ActionType from '../../ActionTypes';\r\n\r\nconst initialState = {\r\n    isInProgress: true,\r\n    isSuccess: null,\r\n    message: null,\r\n    productList: null,\r\n}\r\nconst productReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ActionType.GET_ALL_PRODUCT_REQUEST:\r\n            return {\r\n                ...state,\r\n                isInProgress: true\r\n            }\r\n        case ActionType.GET_ALL_PRODUCT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isInProgress: false,\r\n                productList: action.payload\r\n            }\r\n        case ActionType.GET_ALL_PRODUCT_FAILURE:\r\n            return {\r\n                ...state,\r\n                isInProgress: false,\r\n                message: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default productReducer;","//Declare all Action Types\r\nexport const GET_ALL_PRODUCT_REQUEST = \"GET_ALL_PRODUCT_REQUEST\";\r\nexport const GET_ALL_PRODUCT_SUCCESS = \"GET_ALL_PRODUCT_SUCCESS\";\r\nexport const GET_ALL_PRODUCT_FAILURE = \"GET_ALL_PRODUCT_FAILURE\";\r\n","import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();","import * as ActionType from '../../ActionTypes';\r\nimport data from '../../data/menu-data.json';\r\nexport const getAllProducts = () => {\r\n    return (dispatch) => {\r\n        dispatch(getAllProductRequest())\r\n        dispatch(getAllProductSuccess(data))\r\n    \r\n    };\r\n};\r\n\r\nexport function getAllProductRequest() {\r\n    return {\r\n        type: ActionType.GET_ALL_PRODUCT_REQUEST\r\n    };\r\n}\r\n\r\nexport function getAllProductSuccess(data) {\r\n    return {\r\n        type: ActionType.GET_ALL_PRODUCT_SUCCESS,\r\n        payload: data\r\n    };\r\n}\r\n\r\nexport function getAllProductFailure(error) {\r\n    return {\r\n        type: ActionType.GET_ALL_PRODUCT_FAILURE,\r\n        error\r\n    };\r\n}","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport { getAllProducts } from \"./Action\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport RestaurantIcon from \"@material-ui/icons/Restaurant\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nclass ProductList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isModalOpen: false,\r\n      productList: [],\r\n      oneProduct: null,\r\n      cart: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.props.getAllProducts();\r\n  };\r\n\r\n  componentWillReceiveProps = (newProps) => {\r\n    if (newProps?.productList) {\r\n      this.setState({\r\n        productList: this.getFormattedData(newProps.productList),\r\n      });\r\n    }\r\n  };\r\n\r\n  getProductById(id) {\r\n    this.setState({ isModalOpen: true });\r\n    const oneProduct = this.state.productList.filter((product) => {\r\n      return product.itemId === id;\r\n    });\r\n    this.setState({ oneProduct: oneProduct[0] }, () => {\r\n      console.log(\"oneProduct\", oneProduct);\r\n    });\r\n  }\r\n  getFormattedData(items) {\r\n    let filteredItems = [];\r\n    if (!items.isArray) {\r\n      filteredItems = Object.entries(items)\r\n        .map(function (value) {\r\n          return (items[value[0]] = value[1]);\r\n        })\r\n        .filter((value) => {\r\n          return value.itemId !== undefined;\r\n        });\r\n    }\r\n    return filteredItems;\r\n  }\r\n\r\n  addToCart() {\r\n    const { cart } = this.state;\r\n    this.setState({\r\n      cart: cart + 1,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { productList, isModalOpen, oneProduct } = this.state;\r\n    return (\r\n      <div className=\"mainBox\">\r\n        <Container className=\"mainContainer\">\r\n          <Typography gutterBottom variant=\"h4\">\r\n            Hibachi\r\n          </Typography>\r\n          {productList.map((product) => {\r\n            return (\r\n              <Paper\r\n                style={{ marginBottom: 10, cursor: \"pointer\" }}\r\n                onClick={() => this.getProductById(product.itemId)}\r\n              >\r\n                <Grid item container xs={12}>\r\n                  <Grid item lg={2} xs={6}>\r\n                    <img\r\n                      alt={product.itemId}\r\n                      src={product.imageUrl}\r\n                      className=\"image\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item lg={8} xs={6}>\r\n                    <div className=\"desc\">\r\n                      <Typography gutterBottom variant=\"h6\">\r\n                        {product.name}\r\n                      </Typography>\r\n                      <Typography gutterBottom>{product.category}</Typography>\r\n                      <Typography gutterBottom variant=\"h6\">\r\n                        ${product.price}\r\n                      </Typography>\r\n                    </div>\r\n                  </Grid>\r\n                </Grid>\r\n              </Paper>\r\n            );\r\n          })}\r\n\r\n          {isModalOpen ? (\r\n            <Dialog\r\n              open={isModalOpen}\r\n              TransitionComponent={Transition}\r\n              keepMounted\r\n              onClose={() => {\r\n                this.setState({ isModalOpen: false });\r\n              }}\r\n              aria-labelledby=\"alert-dialog-slide-title\"\r\n              aria-describedby=\"alert-dialog-slide-description\"\r\n            >\r\n              <DialogTitle id=\"alert-dialog-slide-title\">\r\n                {\"Add to your meal  \"}\r\n              </DialogTitle>\r\n              <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-slide-description\">\r\n                  <Paper\r\n                    style={{ marginBottom: 10}}\r\n                    onClick={() => {\r\n                      this.setState({ isModalOpen: true });\r\n                    }}\r\n                  >\r\n                    <Grid item container xs={12}>\r\n                      <Grid item lg={12} xs={12}>\r\n                        <img\r\n                          alt={oneProduct.itemId}\r\n                          src={oneProduct.imageUrl}\r\n                          className=\"bannerImage\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <div className=\"desc\">\r\n                          <Typography gutterBottom variant=\"h6\">\r\n                            {oneProduct.name}\r\n                          </Typography>\r\n                          <Typography gutterBottom>\r\n                            {oneProduct.category}\r\n                          </Typography>\r\n                          <Typography gutterBottom variant=\"h6\">\r\n                            ${oneProduct.price}\r\n                          </Typography>\r\n                        </div>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Paper>\r\n                </DialogContentText>\r\n              </DialogContent>\r\n              <DialogActions>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  onClick={() => this.setState({ isModalOpen: false })}\r\n                  color=\"primary\"\r\n                >\r\n                  CANCEL\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  onClick={() => {\r\n                    this.addToCart();\r\n                  }}\r\n                  color=\"secondary\"\r\n                >\r\n                  ADD TO CART\r\n                </Button>\r\n              </DialogActions>\r\n            </Dialog>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <Grid item lg={12} xs={12}>\r\n            <div className=\"mealButtonStyle\">\r\n              <Button\r\n                variant=\"contained\"\r\n                className=\"fixedbutton\"\r\n                color=\"primary\"\r\n              >\r\n                <IconButton\r\n                  edge=\"start\"\r\n                  color=\"inherit\"\r\n                  aria-label=\"Pages\"\r\n                  className=\"Logo\"\r\n                >\r\n                  <RestaurantIcon />\r\n                </IconButton>{\" \"}\r\n                MY MEAL ( {this.state.cart} ITEMS)\r\n              </Button>\r\n            </div>\r\n          </Grid>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  console.log(\"productListReducer\", state.productListReducer);\r\n  return {\r\n    productList: state.productListReducer.productList,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return bindActionCreators(\r\n    {\r\n      getAllProducts,\r\n    },\r\n    dispatch\r\n  );\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductList);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport * as reducers from \"./Reducers\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { applyMiddleware, combineReducers, createStore, compose } from \"redux\";\nimport history from \"./history\";\n\nimport ProductList from \"./component/ProductList\";\nconst reducer = combineReducers(Object.assign({}, reducers));\n\nconst enhancer = compose(applyMiddleware(thunkMiddleware));\n\nconst store = createStore(reducer, enhancer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router history={history}>\n      <App />\n      <Switch>\n        <Route exact path=\"/\" component={ProductList} />\n      </Switch>\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}